function py2_round(e){return Math.floor(Math.abs(e)+.5)*Math.sign(e)}function encode(e,o,n){e=py2_round(e*n),o=py2_round(o*n);var r=e-o;r<<=1,0>e-o&&(r=~r);for(var t="";r>=32;)t+=String.fromCharCode((32|31&r)+63),r>>=5;return t+=String.fromCharCode(r+63)}function flipped(e){for(var o=[],n=0;n<e.length;n++)o.push(e[n].slice().reverse());return o}var polyline={};polyline.decode=function(e,o){for(var n,r,t=0,i=0,l=0,d=[],p=0,u=0,a=null,c=Math.pow(10,o||5);t<e.length;){a=null,p=0,u=0;do a=e.charCodeAt(t++)-63,u|=(31&a)<<p,p+=5;while(a>=32);n=1&u?~(u>>1):u>>1,p=u=0;do a=e.charCodeAt(t++)-63,u|=(31&a)<<p,p+=5;while(a>=32);r=1&u?~(u>>1):u>>1,i+=n,l+=r,d.push([i/c,l/c])}return d},polyline.encode=function(e,o){if(!e.length)return"";for(var n=Math.pow(10,o||5),r=encode(e[0][0],0,n)+encode(e[0][1],0,n),t=1;t<e.length;t++){var i=e[t],l=e[t-1];r+=encode(i[0],l[0],n),r+=encode(i[1],l[1],n)}return r},polyline.fromGeoJSON=function(e,o){if(e&&"Feature"===e.type&&(e=e.geometry),!e||"LineString"!==e.type)throw new Error("Input must be a GeoJSON LineString");return polyline.encode(flipped(e.coordinates),o)},polyline.toGeoJSON=function(e,o){var n=polyline.decode(e,o);return{type:"LineString",coordinates:flipped(n)}},"object"==typeof module&&module.exports&&(module.exports=polyline);